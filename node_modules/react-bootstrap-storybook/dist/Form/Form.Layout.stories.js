"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValidationForms = exports.DisabledForms = exports.AutoSizing = exports.ColumnSizing = exports.HorizontalForm = exports.FormGrid = exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _index = require("../index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  title: 'components/Layout',
  component: _index.Form,
  argTypes: {}
};
exports.default = _default;

var FormGrid = function FormGrid(args) {
  return /*#__PURE__*/_react.default.createElement(_index.Form, null, /*#__PURE__*/_react.default.createElement(_index.Row, {
    className: "mb-3"
  }, /*#__PURE__*/_react.default.createElement(_index.Form.Group, {
    as: _index.Col,
    controlId: "formGridEmail"
  }, /*#__PURE__*/_react.default.createElement(_index.Form.Label, null, "Email"), /*#__PURE__*/_react.default.createElement(_index.Form.Control, {
    type: "email",
    placeholder: "Enter email"
  })), /*#__PURE__*/_react.default.createElement(_index.Form.Group, {
    as: _index.Col,
    controlId: "formGridPassword"
  }, /*#__PURE__*/_react.default.createElement(_index.Form.Label, null, "Password"), /*#__PURE__*/_react.default.createElement(_index.Form.Control, {
    type: "password",
    placeholder: "Password"
  }))), /*#__PURE__*/_react.default.createElement(_index.Form.Group, {
    className: "mb-3",
    controlId: "formGridAddress1"
  }, /*#__PURE__*/_react.default.createElement(_index.Form.Label, null, "Address"), /*#__PURE__*/_react.default.createElement(_index.Form.Control, {
    placeholder: "1234 Main St"
  })), /*#__PURE__*/_react.default.createElement(_index.Form.Group, {
    className: "mb-3",
    controlId: "formGridAddress2"
  }, /*#__PURE__*/_react.default.createElement(_index.Form.Label, null, "Address 2"), /*#__PURE__*/_react.default.createElement(_index.Form.Control, {
    placeholder: "Apartment, studio, or floor"
  })), /*#__PURE__*/_react.default.createElement(_index.Row, {
    className: "mb-3"
  }, /*#__PURE__*/_react.default.createElement(_index.Form.Group, {
    as: _index.Col,
    controlId: "formGridCity"
  }, /*#__PURE__*/_react.default.createElement(_index.Form.Label, null, "City"), /*#__PURE__*/_react.default.createElement(_index.Form.Control, null)), /*#__PURE__*/_react.default.createElement(_index.Form.Group, {
    as: _index.Col,
    controlId: "formGridState"
  }, /*#__PURE__*/_react.default.createElement(_index.Form.Label, null, "State"), /*#__PURE__*/_react.default.createElement(_index.Form.Select, {
    defaultValue: "Choose..."
  }, /*#__PURE__*/_react.default.createElement("option", null, "Choose..."), /*#__PURE__*/_react.default.createElement("option", null, "..."))), /*#__PURE__*/_react.default.createElement(_index.Form.Group, {
    as: _index.Col,
    controlId: "formGridZip"
  }, /*#__PURE__*/_react.default.createElement(_index.Form.Label, null, "Zip"), /*#__PURE__*/_react.default.createElement(_index.Form.Control, null))), /*#__PURE__*/_react.default.createElement(_index.Form.Group, {
    className: "mb-3",
    id: "formGridCheckbox"
  }, /*#__PURE__*/_react.default.createElement(_index.Form.Check, {
    type: "checkbox",
    label: "Check me out"
  })), /*#__PURE__*/_react.default.createElement(_index.Button, {
    variant: "primary",
    type: "submit"
  }, "Submit"));
};

exports.FormGrid = FormGrid;

var HorizontalForm = function HorizontalForm(args) {
  return /*#__PURE__*/_react.default.createElement(_index.Form, null, /*#__PURE__*/_react.default.createElement(_index.Form.Group, {
    as: _index.Row,
    className: "mb-3",
    controlId: "formHorizontalEmail"
  }, /*#__PURE__*/_react.default.createElement(_index.Form.Label, {
    column: true,
    sm: 2
  }, "Email"), /*#__PURE__*/_react.default.createElement(_index.Col, {
    sm: 10
  }, /*#__PURE__*/_react.default.createElement(_index.Form.Control, {
    type: "email",
    placeholder: "Email"
  }))), /*#__PURE__*/_react.default.createElement(_index.Form.Group, {
    as: _index.Row,
    className: "mb-3",
    controlId: "formHorizontalPassword"
  }, /*#__PURE__*/_react.default.createElement(_index.Form.Label, {
    column: true,
    sm: 2
  }, "Password"), /*#__PURE__*/_react.default.createElement(_index.Col, {
    sm: 10
  }, /*#__PURE__*/_react.default.createElement(_index.Form.Control, {
    type: "password",
    placeholder: "Password"
  }))), /*#__PURE__*/_react.default.createElement("fieldset", null, /*#__PURE__*/_react.default.createElement(_index.Form.Group, {
    as: _index.Row,
    className: "mb-3"
  }, /*#__PURE__*/_react.default.createElement(_index.Form.Label, {
    as: "legend",
    column: true,
    sm: 2
  }, "Radios"), /*#__PURE__*/_react.default.createElement(_index.Col, {
    sm: 10
  }, /*#__PURE__*/_react.default.createElement(_index.Form.Check, {
    type: "radio",
    label: "first radio",
    name: "formHorizontalRadios",
    id: "formHorizontalRadios1"
  }), /*#__PURE__*/_react.default.createElement(_index.Form.Check, {
    type: "radio",
    label: "second radio",
    name: "formHorizontalRadios",
    id: "formHorizontalRadios2"
  }), /*#__PURE__*/_react.default.createElement(_index.Form.Check, {
    type: "radio",
    label: "third radio",
    name: "formHorizontalRadios",
    id: "formHorizontalRadios3"
  })))), /*#__PURE__*/_react.default.createElement(_index.Form.Group, {
    as: _index.Row,
    className: "mb-3",
    controlId: "formHorizontalCheck"
  }, /*#__PURE__*/_react.default.createElement(_index.Col, {
    sm: {
      span: 10,
      offset: 2
    }
  }, /*#__PURE__*/_react.default.createElement(_index.Form.Check, {
    label: "Remember me"
  }))), /*#__PURE__*/_react.default.createElement(_index.Form.Group, {
    as: _index.Row,
    className: "mb-3"
  }, /*#__PURE__*/_react.default.createElement(_index.Col, {
    sm: {
      span: 10,
      offset: 2
    }
  }, /*#__PURE__*/_react.default.createElement(_index.Button, {
    type: "submit"
  }, "Sign in"))));
};

exports.HorizontalForm = HorizontalForm;

var ColumnSizing = function ColumnSizing(args) {
  return /*#__PURE__*/_react.default.createElement(_index.Form, null, /*#__PURE__*/_react.default.createElement(_index.Row, null, /*#__PURE__*/_react.default.createElement(_index.Col, {
    xs: 7
  }, /*#__PURE__*/_react.default.createElement(_index.Form.Control, {
    placeholder: "City"
  })), /*#__PURE__*/_react.default.createElement(_index.Col, null, /*#__PURE__*/_react.default.createElement(_index.Form.Control, {
    placeholder: "State"
  })), /*#__PURE__*/_react.default.createElement(_index.Col, null, /*#__PURE__*/_react.default.createElement(_index.Form.Control, {
    placeholder: "Zip"
  }))));
};

exports.ColumnSizing = ColumnSizing;

var AutoSizing = function AutoSizing(args) {
  return /*#__PURE__*/_react.default.createElement(_index.Form, null, /*#__PURE__*/_react.default.createElement(_index.Row, {
    className: "align-items-center"
  }, /*#__PURE__*/_react.default.createElement(_index.Col, {
    xs: "auto"
  }, /*#__PURE__*/_react.default.createElement(_index.Form.Label, {
    htmlFor: "inlineFormInput",
    visuallyHidden: true
  }, "Name"), /*#__PURE__*/_react.default.createElement(_index.Form.Control, {
    className: "mb-2",
    id: "inlineFormInput",
    placeholder: "Jane Doe"
  })), /*#__PURE__*/_react.default.createElement(_index.Col, {
    xs: "auto"
  }, /*#__PURE__*/_react.default.createElement(_index.Form.Label, {
    htmlFor: "inlineFormInputGroup",
    visuallyHidden: true
  }, "Username"), /*#__PURE__*/_react.default.createElement(_index.InputGroup, {
    className: "mb-2"
  }, /*#__PURE__*/_react.default.createElement(_index.InputGroup.Text, null, "@"), /*#__PURE__*/_react.default.createElement(_index.Form.Control, {
    id: "inlineFormInputGroup",
    placeholder: "Username"
  }))), /*#__PURE__*/_react.default.createElement(_index.Col, {
    xs: "auto"
  }, /*#__PURE__*/_react.default.createElement(_index.Form.Check, {
    type: "checkbox",
    id: "autoSizingCheck",
    className: "mb-2",
    label: "Remember me"
  })), /*#__PURE__*/_react.default.createElement(_index.Col, {
    xs: "auto"
  }, /*#__PURE__*/_react.default.createElement(_index.Button, {
    type: "submit",
    className: "mb-2"
  }, "Submit"))));
};

exports.AutoSizing = AutoSizing;

var DisabledForms = function DisabledForms(args) {
  return /*#__PURE__*/_react.default.createElement(_index.Form, null, /*#__PURE__*/_react.default.createElement("fieldset", {
    disabled: true
  }, /*#__PURE__*/_react.default.createElement(_index.Form.Group, {
    className: "mb-3"
  }, /*#__PURE__*/_react.default.createElement(_index.Form.Label, {
    htmlFor: "disabledTextInput"
  }, "Disabled input"), /*#__PURE__*/_react.default.createElement(_index.Form.Control, {
    id: "disabledTextInput",
    placeholder: "Disabled input"
  })), /*#__PURE__*/_react.default.createElement(_index.Form.Group, {
    className: "mb-3"
  }, /*#__PURE__*/_react.default.createElement(_index.Form.Label, {
    htmlFor: "disabledSelect"
  }, "Disabled select menu"), /*#__PURE__*/_react.default.createElement(_index.Form.Select, {
    id: "disabledSelect"
  }, /*#__PURE__*/_react.default.createElement("option", null, "Disabled select"))), /*#__PURE__*/_react.default.createElement(_index.Form.Group, {
    className: "mb-3"
  }, /*#__PURE__*/_react.default.createElement(_index.Form.Check, {
    type: "checkbox",
    id: "disabledFieldsetCheck",
    label: "Can't check this"
  })), /*#__PURE__*/_react.default.createElement(_index.Button, {
    type: "submit"
  }, "Submit")));
};

exports.DisabledForms = DisabledForms;

var ValidationForms = function ValidationForms(args) {
  var Formik = _index.formik.Formik;

  var schema = _index.yup.object().shape({
    firstName: _index.yup.string().required(),
    lastName: _index.yup.string().required(),
    username: _index.yup.string().required(),
    city: _index.yup.string().required(),
    state: _index.yup.string().required(),
    zip: _index.yup.string().required(),
    terms: _index.yup.bool().required().oneOf([true], 'Terms must be accepted')
  });

  return /*#__PURE__*/_react.default.createElement(Formik, {
    validationSchema: schema,
    onSubmit: console.log,
    initialValues: {
      firstName: 'Mark',
      lastName: 'Otto',
      username: '',
      city: '',
      state: '',
      zip: '',
      terms: false
    }
  }, function (_ref) {
    var handleSubmit = _ref.handleSubmit,
        handleChange = _ref.handleChange,
        handleBlur = _ref.handleBlur,
        values = _ref.values,
        touched = _ref.touched,
        isValid = _ref.isValid,
        errors = _ref.errors;
    return /*#__PURE__*/_react.default.createElement(_index.Form, {
      noValidate: true,
      onSubmit: handleSubmit
    }, /*#__PURE__*/_react.default.createElement(_index.Row, {
      className: "mb-3"
    }, /*#__PURE__*/_react.default.createElement(_index.Form.Group, {
      as: _index.Col,
      md: "4",
      controlId: "validationFormik01"
    }, /*#__PURE__*/_react.default.createElement(_index.Form.Label, null, "First name"), /*#__PURE__*/_react.default.createElement(_index.Form.Control, {
      type: "text",
      name: "firstName",
      value: values.firstName,
      onChange: handleChange,
      isValid: touched.firstName && !errors.firstName
    }), /*#__PURE__*/_react.default.createElement(_index.Form.Control.Feedback, null, "Looks good!")), /*#__PURE__*/_react.default.createElement(_index.Form.Group, {
      as: _index.Col,
      md: "4",
      controlId: "validationFormik02"
    }, /*#__PURE__*/_react.default.createElement(_index.Form.Label, null, "Last name"), /*#__PURE__*/_react.default.createElement(_index.Form.Control, {
      type: "text",
      name: "lastName",
      value: values.lastName,
      onChange: handleChange,
      isValid: touched.lastName && !errors.lastName
    }), /*#__PURE__*/_react.default.createElement(_index.Form.Control.Feedback, null, "Looks good!")), /*#__PURE__*/_react.default.createElement(_index.Form.Group, {
      as: _index.Col,
      md: "4",
      controlId: "validationFormikUsername"
    }, /*#__PURE__*/_react.default.createElement(_index.Form.Label, null, "Username"), /*#__PURE__*/_react.default.createElement(_index.InputGroup, {
      hasValidation: true
    }, /*#__PURE__*/_react.default.createElement(_index.InputGroup.Text, {
      id: "inputGroupPrepend"
    }, "@"), /*#__PURE__*/_react.default.createElement(_index.Form.Control, {
      type: "text",
      placeholder: "Username",
      "aria-describedby": "inputGroupPrepend",
      name: "username",
      value: values.username,
      onChange: handleChange,
      isInvalid: !!errors.username
    }), /*#__PURE__*/_react.default.createElement(_index.Form.Control.Feedback, {
      type: "invalid"
    }, errors.username)))), /*#__PURE__*/_react.default.createElement(_index.Row, {
      className: "mb-3"
    }, /*#__PURE__*/_react.default.createElement(_index.Form.Group, {
      as: _index.Col,
      md: "6",
      controlId: "validationFormik03"
    }, /*#__PURE__*/_react.default.createElement(_index.Form.Label, null, "City"), /*#__PURE__*/_react.default.createElement(_index.Form.Control, {
      type: "text",
      placeholder: "City",
      name: "city",
      value: values.city,
      onChange: handleChange,
      isInvalid: !!errors.city
    }), /*#__PURE__*/_react.default.createElement(_index.Form.Control.Feedback, {
      type: "invalid"
    }, errors.city)), /*#__PURE__*/_react.default.createElement(_index.Form.Group, {
      as: _index.Col,
      md: "3",
      controlId: "validationFormik04"
    }, /*#__PURE__*/_react.default.createElement(_index.Form.Label, null, "State"), /*#__PURE__*/_react.default.createElement(_index.Form.Control, {
      type: "text",
      placeholder: "State",
      name: "state",
      value: values.state,
      onChange: handleChange,
      isInvalid: !!errors.state
    }), /*#__PURE__*/_react.default.createElement(_index.Form.Control.Feedback, {
      type: "invalid"
    }, errors.state)), /*#__PURE__*/_react.default.createElement(_index.Form.Group, {
      as: _index.Col,
      md: "3",
      controlId: "validationFormik05"
    }, /*#__PURE__*/_react.default.createElement(_index.Form.Label, null, "Zip"), /*#__PURE__*/_react.default.createElement(_index.Form.Control, {
      type: "text",
      placeholder: "Zip",
      name: "zip",
      value: values.zip,
      onChange: handleChange,
      isInvalid: !!errors.zip
    }), /*#__PURE__*/_react.default.createElement(_index.Form.Control.Feedback, {
      type: "invalid"
    }, errors.zip))), /*#__PURE__*/_react.default.createElement(_index.Form.Group, {
      className: "mb-3"
    }, /*#__PURE__*/_react.default.createElement(_index.Form.Check, {
      required: true,
      name: "terms",
      label: "Agree to terms and conditions",
      onChange: handleChange,
      isInvalid: !!errors.terms,
      feedback: errors.terms,
      id: "validationFormik0"
    })), /*#__PURE__*/_react.default.createElement(_index.Button, {
      type: "submit"
    }, "Submit form"));
  });
};

exports.ValidationForms = ValidationForms;