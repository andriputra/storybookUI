"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toggleButtonGroupVariant = exports.ToggleButtonGroup = exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactBootstrap = require("react-bootstrap");

var _excluded = ["options", "value", "name", "onChange", "type", "variant", "labelKey", "valueKey"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var toggleButtonGroupVariant = {
  PRIMARY: 'primary',
  SECONDARY: 'secondary',
  SUCCESS: 'success',
  DANGER: 'danger',
  WARNING: 'warning',
  INFO: 'info',
  DARK: 'dark',
  LIGHT: 'light',
  LINK: 'link'
};
exports.toggleButtonGroupVariant = toggleButtonGroupVariant;
var toggleButtonGroupType = {
  RADIO: 'radio',
  CHECKBOX: 'checkbox'
};

var ToggleButtonGroup = function ToggleButtonGroup(_ref) {
  var options = _ref.options,
      value = _ref.value,
      name = _ref.name,
      onChange = _ref.onChange,
      type = _ref.type,
      variant = _ref.variant,
      labelKey = _ref.labelKey,
      valueKey = _ref.valueKey,
      props = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/_react.default.createElement(_reactBootstrap.ToggleButtonGroup, _extends({
    type: type,
    name: name,
    value: value,
    onChange: onChange
  }, props), options.map(function (radio) {
    var optId = radio[valueKey];
    return /*#__PURE__*/_react.default.createElement(_reactBootstrap.ToggleButton, {
      key: optId,
      id: "option-".concat(optId),
      type: type,
      variant: "outline-".concat(variant),
      name: "option-name",
      value: optId
    }, radio[labelKey]);
  }));
};

exports.ToggleButtonGroup = ToggleButtonGroup;
ToggleButtonGroup.defaultProps = {
  type: toggleButtonGroupType.RADIO,
  variant: toggleButtonGroupVariant.PRIMARY,
  labelKey: 'name',
  valueKey: 'value',
  options: [],
  name: 'toggle-button-group',
  value: '',
  onChange: function onChange() {}
};
ToggleButtonGroup.propTypes = {
  type: _propTypes.default.oneOf(Object.values(toggleButtonGroupType)),
  variant: _propTypes.default.oneOf(Object.values(toggleButtonGroupVariant)),
  labelKey: _propTypes.default.string,
  valueKey: _propTypes.default.string,
  options: _propTypes.default.arrayOf(Object),
  name: _propTypes.default.string,
  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.instanceOf(Array)]),
  onChange: _propTypes.default.func
};
var _default = ToggleButtonGroup;
exports.default = _default;